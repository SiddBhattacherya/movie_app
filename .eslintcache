[{"C:\\CodingProject\\Shopify\\Frontend_Challenge\\movie_app\\src\\index.js":"1","C:\\CodingProject\\Shopify\\Frontend_Challenge\\movie_app\\src\\reportWebVitals.js":"2","C:\\CodingProject\\Shopify\\Frontend_Challenge\\movie_app\\src\\App.js":"3","C:\\CodingProject\\Shopify\\Frontend_Challenge\\movie_app\\src\\MovieList.js":"4","C:\\CodingProject\\Shopify\\Frontend_Challenge\\movie_app\\src\\MovieResult.js":"5"},{"size":584,"mtime":1610699514304,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":239,"mtime":1610699497225,"results":"9","hashOfConfig":"7"},{"size":4553,"mtime":1610699477786,"results":"10","hashOfConfig":"7"},{"size":0,"mtime":1610697873843,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1p54894",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"15"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"15"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\CodingProject\\Shopify\\Frontend_Challenge\\movie_app\\src\\index.js",["26"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styles from './MovieList.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["27","28"],"C:\\CodingProject\\Shopify\\Frontend_Challenge\\movie_app\\src\\reportWebVitals.js",[],"C:\\CodingProject\\Shopify\\Frontend_Challenge\\movie_app\\src\\App.js",["29","30"],"import logo from './logo.svg';\nimport './App.css';\nimport MovieList from './MovieList'\nimport styles from './MovieList.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MovieList/>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\CodingProject\\Shopify\\Frontend_Challenge\\movie_app\\src\\MovieList.js",["31","32","33","34","35","36","37","38","39","40","41","42","43"],"import React, {Component} from \"react\";\r\nimport axios from 'axios';\r\nimport SearchField from 'react-search-field';\r\nimport {Alert, Button, Badge, Form, FormGroup, Label, Input, FormText,   Card, CardText, CardBody, CardLink,\r\n    CardTitle, CardSubtitle, Container, Jumbotron, JumbotronProps, Col, Row } from 'reactstrap';\r\nimport MovieResult from \"./MovieResult\";\r\nimport styles from './MovieList.css';\r\n\r\nlet movies = {}\r\n   \r\nclass MovieList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            nominatedMovies: [],\r\n            movies: [], \r\n            title: '',\r\n            button_state: false\r\n        };\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.nominateMovie = this.nominateMovie.bind(this)\r\n    }\r\n   \r\n    async componentDidMount(){\r\n     \r\n    }\r\n\r\n    async getMovies(title){\r\n        let res = await axios.get(`http://www.omdbapi.com/?S=${title}&apikey=79dfb4ab`)\r\n        let list = res.data.Search;\r\n        this.setState({movies:list})\r\n    }\r\n\r\n    nominateMovie(movie){\r\n        console.log(movie)\r\n        var joined = this.state.nominatedMovies.concat(movie);\r\n        this.setState({ nominatedMovies: joined })\r\n        //localStorage.setItem(\"nominated movie\", movie)\r\n    }\r\n\r\n    removeNomination(movie){\r\n        console.log(movie)\r\n        var removed = this.state.nominatedMovies.filter(el => el !== movie)\r\n        this.setState({nominatedMovies: removed})\r\n    }\r\n\r\n     handleChange(event){\r\n        this.setState({[event.target.name]: event.target.value})\r\n        console.log(\"change\")\r\n    }\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        this.getMovies(this.state.title)\r\n        console.log(\"submit\")\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                 <Jumbotron>\r\n                        <h1 className=\"display-3\">Movie Buddy</h1>\r\n                        {\r\n                            this.state.nominatedMovies.length >= 5 && (\r\n                               <h1> <Badge color='success'>Congrats! You have nominated 5 movies!</Badge></h1>\r\n                            )\r\n\r\n                            \r\n                        }\r\n                        <p className=\"lead\">Search for movies and nominate them!</p>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup>\r\n                                <Input type=\"text\" name=\"title\" onChange={this.handleChange} value={this.state.title}></Input>\r\n                            </FormGroup>\r\n                            <Button color=\"primary\" type='submit'>Search</Button>\r\n                        </Form>\r\n                        \r\n                        \r\n                    \r\n                </Jumbotron>\r\n                <Container className=\"float-left\">\r\n                <Row xs=\"2\"> \r\n                \r\n                    <Col>\r\n                    <Jumbotron color=\"primary\" fluid>\r\n                    <h3 className='searchText'>Search Results</h3>\r\n                        <div>\r\n                                    {this.state.movies.map(m =>(\r\n                                        <Row xs=\"2\">\r\n                                          <Col className='movieListing'> <Alert key={m.Title} color='danger'>{m.Title} ({m.Year})  <Button disabled={this.state.button_state} color='primary' id={m} onClick={() => this.nominateMovie(m)}>Nominate</Button></Alert> </Col>\r\n                                        </Row>\r\n                                    ))}\r\n                        </div>\r\n\r\n                </Jumbotron>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                    <Jumbotron color=\"primary\" fluid>\r\n                    <h3 className='nominationText'>Nominated Movies</h3>\r\n                        <div>\r\n                                    {this.state.nominatedMovies.map(m =>(\r\n                                        <Row xs=\"2\">\r\n                                          <Col className='nomination'> <Alert key={m} color='danger'>{m.Title} ({m.Year}) <Button id={m} onClick={()=>this.removeNomination(m)} >Remove</Button></Alert> </Col>\r\n                                        </Row>\r\n                                    ))}\r\n                        </div>\r\n\r\n                </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n                </Container>\r\n                \r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieList;","C:\\CodingProject\\Shopify\\Frontend_Challenge\\movie_app\\src\\MovieResult.js",[],{"ruleId":"44","severity":1,"message":"45","line":7,"column":8,"nodeType":"46","messageId":"47","endLine":7,"endColumn":14},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"44","severity":1,"message":"52","line":1,"column":8,"nodeType":"46","messageId":"47","endLine":1,"endColumn":12},{"ruleId":"44","severity":1,"message":"45","line":4,"column":8,"nodeType":"46","messageId":"47","endLine":4,"endColumn":14},{"ruleId":"44","severity":1,"message":"53","line":3,"column":8,"nodeType":"46","messageId":"47","endLine":3,"endColumn":19},{"ruleId":"44","severity":1,"message":"54","line":4,"column":48,"nodeType":"46","messageId":"47","endLine":4,"endColumn":53},{"ruleId":"44","severity":1,"message":"55","line":4,"column":62,"nodeType":"46","messageId":"47","endLine":4,"endColumn":70},{"ruleId":"44","severity":1,"message":"56","line":4,"column":74,"nodeType":"46","messageId":"47","endLine":4,"endColumn":78},{"ruleId":"44","severity":1,"message":"57","line":4,"column":80,"nodeType":"46","messageId":"47","endLine":4,"endColumn":88},{"ruleId":"44","severity":1,"message":"58","line":4,"column":90,"nodeType":"46","messageId":"47","endLine":4,"endColumn":98},{"ruleId":"44","severity":1,"message":"59","line":4,"column":100,"nodeType":"46","messageId":"47","endLine":4,"endColumn":108},{"ruleId":"44","severity":1,"message":"60","line":5,"column":5,"nodeType":"46","messageId":"47","endLine":5,"endColumn":14},{"ruleId":"44","severity":1,"message":"61","line":5,"column":16,"nodeType":"46","messageId":"47","endLine":5,"endColumn":28},{"ruleId":"44","severity":1,"message":"62","line":5,"column":52,"nodeType":"46","messageId":"47","endLine":5,"endColumn":66},{"ruleId":"44","severity":1,"message":"63","line":6,"column":8,"nodeType":"46","messageId":"47","endLine":6,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":7,"column":8,"nodeType":"46","messageId":"47","endLine":7,"endColumn":14},{"ruleId":"44","severity":1,"message":"64","line":9,"column":5,"nodeType":"46","messageId":"47","endLine":9,"endColumn":11},"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","no-native-reassign",["65"],"no-negated-in-lhs",["66"],"'logo' is defined but never used.","'SearchField' is defined but never used.","'Label' is defined but never used.","'FormText' is defined but never used.","'Card' is defined but never used.","'CardText' is defined but never used.","'CardBody' is defined but never used.","'CardLink' is defined but never used.","'CardTitle' is defined but never used.","'CardSubtitle' is defined but never used.","'JumbotronProps' is defined but never used.","'MovieResult' is defined but never used.","'movies' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]